@page
@using Entities
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    List<Offer> offersList = Model.GetList();
}

<div class="text-center">

<div id="xspreadsheet"></div>

<!-- #panel>form>button+button+button -->

<style>
#panel form button {
    display: inline-block;
}
</style>
<div id="panel">
<form action="" method="">
    <h2>Job offers control panel</h2>
    <div>
    @* <summary>
        <details>
        <ul>
            <li><label><input type="checkbox" checked> LinkedIn</label></li>
            <li><label><input type="checkbox" checked> WeWork</label></li>
            <li><label><input type="checkbox" checked> Pracuj.pl</label></li>
        </ul>
        </details>
    </summary> *@
    <button type="submit" name="cmd" value="lookForNewOffers">check for new offers</button>
    </div>
    <div><button name="cmd" value="refresh" id="refresh-btn">refresh</button></div>
    <div><button id="clear-btn">clean database</button></div>
    <div><button>download xls</button></div>
  </form>
  <div><button id="add-btn">add to db</button></div>
</div>

<script>

  let offersCount = 0;
  function buildXSpreadsheetRowsFromData(data) {
    offersCount = data.length;
    const rows = {
      len: data.length + 20,
    }
    for (let i = 0; i < data.length; i++) {
      rows[i] = {
        cells: {
            0: {text: data[i].id },
            1: {text: data[i].title},
            2: {text: data[i].companyName}
        }
      }
    }
    return rows
  }

  function getOffers(url) {
    return fetch(url).then(response => response.json());
  }

  const SHEET = x_spreadsheet('#xspreadsheet');
  getOffers("https://localhost:5001/offers").then(data => {
    console.log(data);
    SHEET.loadData([{
      rows: buildXSpreadsheetRowsFromData(data),
      cols: {
        0: { width: 10 },
        1: { width: 200 },
        2: { width: 200 }
      }
    }])
  });

  SHEET.on('cell-edited', (text, ri, ci) => {

    if (ri < offersCount) {

      let id = SHEET.cell(ri, 0).text;
      let entPath = "";

      if (ci == 1) {
        entPath = "/Title";
      } else if (ci == 2) {
        entPath = "/CompanyName";
      }

      let obj = [{
        op: "replace",
        path: entPath,
        value: text
      }];
      
      fetch(`https://localhost:5001/offers/${id}`, {
        "method": "PATCH",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": JSON.stringify(obj)
      })
      .then(response => {
        console.log(response);
      })
      .catch(err => {
        console.error(err);
      });

    }

  });

  function clearDatabase() {
    fetch("https://localhost:5001/offers", {
      "method": "DELETE",
      "headers": {}
    })
    .then(response => {
      console.log(response);
    })
    .catch(err => {
      console.error(err);
    });
  }

  function addToDb() {
    let i = offersCount;
    let newOffers = [];
    for(let i = offersCount; i < offersCount + 20; i++) {

      if(SHEET.cell(i, 1) != null) {
        
        newOffer = {
          logoLink: "",
          title: SHEET.cell(i, 1).text,
          companyName: SHEET.cell(i, 2).text
        }

        newOffers.push(newOffer);

      }

    }

    if (newOffers.length > 0) {
      fetch("https://localhost:5001/offers/m", {
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": JSON.stringify(newOffers)
      })
      .then(response => {
        console.log(response);
      })
      .catch(err => {
        console.error(err);
      });
    }

  }

  const refreshBtn = document.getElementById("refresh-btn");
  refreshBtn.addEventListener("click", getOffers);
  const clearBtn = document.getElementById("clear-btn");
  clearBtn.addEventListener("click", clearDatabase);
  const addBtn = document.getElementById("add-btn");
  addBtn.addEventListener("click", addToDb);

  //document.querySelector('listed-time > time').getAttribute("datetime");

</script>

</div>
